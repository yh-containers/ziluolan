<?php
namespace frontend\controllers;


class OrderController extends CommonController
{


    public $is_need_login=true;
    /**
     * 用户模型
     * @var \common\models\User
     * */
    protected $user_model;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->user_model = \common\models\User::findOne($this->user_id);
        if(empty($this->user_model)){
            $this->user_id = 0;
        }
    }
    //我的订单
    public function actionIndex()
    {
        $state = $this->request->get('state',0);

        return $this->render('index',[
            'state' => $state,
        ]);
    }

    public function actionInfo($is_return=false)
    {
        $pay_way = $this->request->isGet ? $this->request->get('pay_way') : $this->request->post('pay_way');
        $addr_id = $this->request->isGet ? $this->request->get('addr_id') : $this->request->post('addr_id');
        $channel = $this->request->isGet ? $this->request->get('channel') : $this->request->post('channel');
        $gid = $this->request->isGet ? $this->request->get('gid') : $this->request->post('gid');
        $sku_id = $this->request->isGet ? $this->request->get('sku_id') : $this->request->post('sku_id');
        $num = $this->request->isGet ? $this->request->get('num', 1) : $this->request->post('num', 1);
        //渠道数据
        $channel_g_data = $this->request->isGet ? $this->request->get('channel_g_data') : $this->request->post('channel_g_data');
        //地址信息
        $addr_where['uid'] = $this->user_id;
        !empty($addr_id) && $addr_where['id'] = $addr_id;
        $model_addr = \common\models\UserAddr::find()->asArray()->where($addr_where)->orderBy('is_default desc, id desc')->one();

        $model = new \common\models\Order();
        //详情渠道
        if($channel){
            $model->check_channel = $channel;
            $model->channel_g_data = $channel_g_data;
        }
        //检出订单信息
        list($goods_info, $money) = $model->checkOrderInfo($this->user_model, $gid,$sku_id, $num);
        /**/
        if ($is_return) {
            return [$model, $goods_info, $money, $model_addr];
        }

        //发票信息
        $invoice_info = \common\models\Order::getPropInfo('fields_invoice');
        return $this->render('info',[
            'model_addr'  => $model_addr,
            'gid' => $gid,
            'sku_id' => $sku_id,
            'num' => $num,
            'channel' => $channel,
            'goods_info' => $goods_info,
            'money' => $money,
            'pay_way' => $pay_way,
            'channel_g_data' => $channel_g_data,
            'user_model' => $this->user_model,
            'invoice_info' => $invoice_info,
        ]);
    }


    //订单提交
    public function actionConfirm()
    {
        //所有数据
        $php_input = $this->request->post();
        //订单数据
        list($order_model, $goods_info, $money, $model_addr) = $this->actionInfo(true);
        try {
            $order_model->confirm($this->user_model, $goods_info, $money, $model_addr, $php_input);
        } catch (\Exception $e) {
            throw new \yii\base\UserException($e->getMessage());
        }
        return $this->asJson(['code' => 1, 'msg' => '创建订单成功', 'url' => \yii\helpers\Url::to(['order/detail', 'id' => $order_model->id])]);
    }

    //订单详情
    public function actionDetail()
    {
        $id = $this->request->get('id');

        $model = \common\models\Order::find()->with(['linkAddr','linkGoods','linkLogistics'])->where(['id'=>$id])->one();
        return $this->render('detail',[
            'model' => $model,
            'handle' => empty($model)?[]:$model->getUserHandleAction(),
        ]);
    }


    //订单列表
    public function actionShowList()
    {
        $state = $this->request->get('state',0);
        $where = ['uid'=>$this->user_id];
        if($state==1){
            //待付款
            $where['step_flow']= 0;
            $where['status']= 0;
        }elseif($state==2){
            //已完成
            $where['step_flow']= 3;
            $where['status']=3;
        }elseif($state==3){
            //待发货
            $where['step_flow']= 1;
            $where['is_send']= 0;
        }elseif($state==4){
            //待收货
            $where['step_flow']= 2;
            $where['is_receive']= 0;
        }
        $query = \common\models\Order::find()->where($where);
        $count = $query->count();
        $pagination = \Yii::createObject(array_merge(\Yii::$app->components['pagination'],['totalCount' => $count]));
        $list = $query
            ->with(['linkGoods'])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->orderBy('id desc')
            ->all();

        $data = [];

        foreach($list as $vo){
            $info = [
                'id'         =>  $vo['id'],
                'no'         =>  $vo['no'],
                'status_name'=>  $vo->getStepFlowInfo($vo['step_flow']),
                'create_time'=>  $vo['create_time']?date('Y-m-d H:i:s',$vo['create_time']):'',
                'pay_money'  =>  $vo['pay_money'],
                'remark'     =>  $vo['remark'],
                'handle'     =>  $vo->getUserHandleAction(),
                'goods_data' => [],
            ];
            foreach ($vo['linkGoods'] as $goods){
                $info['goods_data'][]=[
                    'name'      => $goods['name'],
                    'num'       => $goods['num'],
                    'sku_name'  => $goods['sku_name'],
                    'price'     => $goods['price'],
                    'img'       => $goods['img'],
                ];
            }
            $data[] = $info;
        }

        return $this->asJson(['code'=>1,'msg'=>'获取成功','data'=>$data,'pages'=>$pagination->pageCount]);
    }


    //删除订单
    public function actionDel()
    {
        $id = $this->request->get('id');
        try{
            \common\models\Order::del($this->user_model,$id);
        }catch (\Exception $e){
            throw new \yii\base\UserException($e->getMessage());
        }
        return $this->asJson(['code'=>1,'msg'=>'删除成功']);
    }

    //订单收货
    public function actionReceive()
    {
        $id = $this->request->get('id');
        try{
            \common\models\Order::receive($this->user_model,$id);
        }catch (\Exception $e){

        }
        return $this->asJson(['code'=>1,'msg'=>'操作成功']);
    }



    //取消订单
    public function actionCancel()
    {
        $id = $this->request->get('id');
        try{
            \common\models\Order::cancel($this->user_model,$id);
        }catch (\Exception $e){
            throw new \yii\base\UserException($e->getMessage());
        }
        $this->asJson(['code'=>1,'msg'=>'操作成功']);
    }

    //订单支付
    public function actionPay()
    {

        $id = $this->request->isGet?$this->request->get('id'):$this->request->post('id');
        if($this->request->isAjax){
            $php_input = $this->request->post();
            try{
                $php_input['open_id'] = $this->wx_open_id;
                list($type, $parameters) = \common\models\Order::Pay($this->user_model,$id,$php_input);
            }catch (\Exception $e){
                throw new \yii\base\UserException($e->getMessage());
            }
            if(!empty($type)){
                return $this->asJson(['code'=>2,'msg'=>'操作成功','type'=>$type,'parameters'=>$parameters]);
            }else{
                return $this->asJson(['code'=>1,'msg'=>'付款成功']);
            }
        }
        $model = \common\models\Order::findOne($id);

        return $this->render('pay',[
            'model' => $model,
            'user_model' => $this->user_model
        ]);
    }

    //订单回调
    public function actionNotify()
    {

    }

}